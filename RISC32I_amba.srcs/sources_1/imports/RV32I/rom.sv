`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:127]; //16개
  
    //0x0000~0fff => ram
    //0x1000~1fff => peri1
    //gpio : inout 포트 
    initial begin
        // rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        // rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        // rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        // rom[2] = 32'b0000000_00001_00010_001_00110_0110011; // sll  x6,  x2, x1
        // rom[3] = 32'b0000000_00001_00010_101_00111_0110011; // srl  x7,  x2, x1
        // rom[4] = 32'b0100000_00001_00010_101_01000_0110011; // sra  x8,  x2, x1
        // rom[5] = 32'b0000000_00001_00010_010_01001_0110011; // slt  x9,  x2, x1
        // rom[6] = 32'b0000000_00001_00010_011_01010_0110011; // sltu x10, x2, x1
        // rom[7] = 32'b0000000_00001_00010_100_01011_0110011; // xor  x11, x2, x1
        // rom[8] = 32'b0000000_00001_00010_110_01100_0110011; // or   x12, x2, x1
        // rom[9] = 32'b0000000_00001_00010_111_01101_0110011; // and  x13, x2, x1
        //rom[x]=32'b imm7 _ rs2 _ rs1 _f3 _ imm5  _opcode; // S-Type
    //     rom[2] = 32'b0000000_00010_00001_010_00111_0100011 ; //sw x2(rs2 :wdata) , 저장위치:7(im)x0(rs1) ;


         //rom[x]=32'b imm12 _ rs1 _f3_ rd _opcode; // L-Type //
        // rom[0] = 32'b000000000101_00001_000_00100_0000011; // LB  x4, 5(x1)
        // rom[1] = 32'b000000000101_00001_001_00101_0000011; // LH  x5, 5(x1)
        // rom[2] = 32'b000000000101_00001_010_00110_0000011; // LW  x6, 5(x1)
        // rom[3] = 32'b000000000101_00001_100_00111_0000011; // LBU x7, 5(x1)
        // rom[4] = 32'b000000000101_00001_101_01000_0000011; // LHU x8, 5(x1)

    //  //rom[x]=32'b imm12 _rs1_ func3_rd _opcode; // I-Type_comm
    
        // rom[0] = 32'b000000001110_00010_000_00100_0010011; // ADDI  x4, x2, 14
        // rom[1] = 32'b000000001110_00010_010_00101_0010011; // SLTI  x5, x2, 14
        // rom[2] = 32'b000000001110_00010_011_00110_0010011; // SLTIU x6, x2, 14
        // rom[3] = 32'b000000001110_00010_100_00111_0010011; // XORI  x7, x2, 14
        // rom[4] = 32'b000000001110_00010_110_01000_0010011; // ORI   x8, x2, 14
        // rom[5] = 32'b000000001110_00010_111_01001_0010011; // ANDI  x9, x2, 14
        // rom[6] = 32'b0000000_01110_00010_001_01010_0010011; // SLLI x10, x2, 14
        // rom[7] = 32'b0000000_01110_00010_101_01011_0010011; // SRLI x11, x2, 14
        // rom[8] = 32'b0100000_01110_00010_101_01100_0010011; // SRAI x12, x2, 14

    //rom[x]=32'b 0000000 / 0100000 _ shamt _rs1_ func3_rd _opcode; // T-Type_shamt

    //Stype

// rom[0] = 32'b0000000_11111_00010_000_01111_0100011; // SB  x31, 15(x4)
// rom[1] = 32'b0000000_11111_00011_001_01111_0100011; // SH  x31, 15(x5)
// rom[0] = 32'b0000000_00001_00010_010_00000_0100011; // SW  x31, 15(x5) rs1:0 rs2:1 imm 0 

// BTYPE
// rom[0] = 32'b0000000_00010_00001_000_01000_1100011; // BEQ  x1, x2, 8 
// rom[1] = 32'b0000000_00010_00001_001_01000_1100011; // BNE  x1, x2, 8
// rom[3] = 32'b0000000_00010_00001_100_01000_1100011; // BLT  x1, x2, 8
// rom[5] = 32'b0000000_00010_00001_101_01000_1100011; // BGE  x1, x2, 8
// rom[6] = 32'b0000000_00010_00001_110_01000_1100011; // BLTU x1, x2, 8
// rom[8] = 32'b0000000_00010_00001_111_01000_1100011; // BGEU x1, x2, 8

//lui

// rom[0] = 32'b00000000000000000010_00001_0110111; // LUI x1, 2

//aui
// rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
// rom[1] = 32'b00000000000000000010_00001_0010111; // AUIPC x1, 2
        // rom[10] =32'b0000000_00010_00111_001_10100_0010011 ; //SLLI x20 = x7 << 2(shamt) 
        // rom[11] =32'b0000000_00011_01000_101_10101_0010011 ; //SRLI x21 = x8 >> 3(shamt)
        // rom[12] =32'b0100000_00010_01001_101_10110_0010011 ; //SRAI x22 = x9 >>> 2(shamt) 

        // rom[13] =32'b0000000_00001_00010_101_00100_1100011;  //BGE x2x1 imm 4 
        
        // rom [14] = 32'b00000000000000000110_10111_0110111; //LUI imm = 6, rd = x23
        // rom [15] = 32'b00000000000000000111_11000_0010111; // AUIPC imm = 7 rd = x24

        // rom [10] = 32'b00000000000000001000_11001_1101111; //LUI imm = 8, rd = x25

        // rom [12] = 32'b000000001000_00001_000_11010_1100111; // AUIPC imm = 8 rd = x26

        //jl
        // rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        // rom[1] = 32'b000000000101_00001_000_00010_1100111; // rd = x1  x2
        // //J
        // rom[0] = 32'b0_00010000_0_0000000000_00001_1101111; // JAL x1, 16

        //embeded
       
        // $readmemh("code.mem",rom);
rom[0] = 32'b00010000000000000000000100010011;
rom[1] = 32'b11111101000000010000000100010011;
rom[2] = 32'b00000010000100010010011000100011;
rom[3] = 32'b00000010100000010010010000100011;
rom[4] = 32'b00000011000000010000010000010011;
rom[5] = 32'b11111100000001000010110000100011;
rom[6] = 32'b11111100000001000010111000100011;
rom[7] = 32'b11111110000001000010000000100011;
rom[8] = 32'b11111110000001000010001000100011;
rom[9] = 32'b11111110000001000010010000100011;
rom[10] = 32'b11111110000001000010011000100011;
rom[11] = 32'b00000000010100000000011110010011;
rom[12] = 32'b11111100111101000010110000100011;
rom[13] = 32'b00000000001100000000011110010011;
rom[14] = 32'b11111100111101000010111000100011;
rom[15] = 32'b00000000000100000000011110010011;
rom[16] = 32'b11111110111101000010000000100011;
rom[17] = 32'b00000000001000000000011110010011;
rom[18] = 32'b11111110111101000010001000100011;
rom[19] = 32'b00000000010000000000011110010011;
rom[20] = 32'b11111110111101000010010000100011;
rom[21] = 32'b11111101100001000000011110010011;
rom[22] = 32'b00000000011000000000010110010011;
rom[23] = 32'b00000000000001111000010100010011;
rom[24] = 32'b00000001110000000000000011101111;
rom[25] = 32'b00000000000000000000011110010011;
rom[26] = 32'b00000000000001111000010100010011;
rom[27] = 32'b00000010110000010010000010000011;
rom[28] = 32'b00000010100000010010010000000011;
rom[29] = 32'b00000011000000010000000100010011;
rom[30] = 32'b00000000000000001000000001100111;
rom[31] = 32'b11111101000000010000000100010011;
rom[32] = 32'b00000010000100010010011000100011;
rom[33] = 32'b00000010100000010010010000100011;
rom[34] = 32'b00000011000000010000010000010011;
rom[35] = 32'b11111100101001000010111000100011;
rom[36] = 32'b11111100101101000010110000100011;
rom[37] = 32'b11111110000001000010011000100011;
rom[38] = 32'b00001001000000000000000001101111;
rom[39] = 32'b11111110110001000010011110000011;
rom[40] = 32'b00000000000101111000011110010011;
rom[41] = 32'b11111110111101000010010000100011;
rom[42] = 32'b00000110100000000000000001101111;
rom[43] = 32'b11111110100001000010011110000011;
rom[44] = 32'b00000000001001111001011110010011;
rom[45] = 32'b11111101110001000010011100000011;
rom[46] = 32'b00000000111101110000011110110011;
rom[47] = 32'b00000000000001111010011100000011;
rom[48] = 32'b11111110110001000010011110000011;
rom[49] = 32'b00000000001001111001011110010011;
rom[50] = 32'b11111101110001000010011010000011;
rom[51] = 32'b00000000111101101000011110110011;
rom[52] = 32'b00000000000001111010011110000011;
rom[53] = 32'b00000010111101110101100001100011;
rom[54] = 32'b11111110100001000010011110000011;
rom[55] = 32'b00000000001001111001011110010011;
rom[56] = 32'b11111101110001000010011100000011;
rom[57] = 32'b00000000111101110000011010110011;
rom[58] = 32'b11111110110001000010011110000011;
rom[59] = 32'b00000000001001111001011110010011;
rom[60] = 32'b11111101110001000010011100000011;
rom[61] = 32'b00000000111101110000011110110011;
rom[62] = 32'b00000000000001111000010110010011;
rom[63] = 32'b00000000000001101000010100010011;
rom[64] = 32'b00000101000000000000000011101111;
rom[65] = 32'b11111110100001000010011110000011;
rom[66] = 32'b00000000000101111000011110010011;
rom[67] = 32'b11111110111101000010010000100011;
rom[68] = 32'b11111110100001000010011100000011;
rom[69] = 32'b11111101100001000010011110000011;
rom[70] = 32'b11111000111101110100101011100011;
rom[71] = 32'b11111110110001000010011110000011;
rom[72] = 32'b00000000000101111000011110010011;
rom[73] = 32'b11111110111101000010011000100011;
rom[74] = 32'b11111101100001000010011110000011;
rom[75] = 32'b11111111111101111000011110010011;
rom[76] = 32'b11111110110001000010011100000011;
rom[77] = 32'b11110110111101110100010011100011;
rom[78] = 32'b00000000000000000000000000010011;
rom[79] = 32'b00000000000000000000000000010011;
rom[80] = 32'b00000010110000010010000010000011;
rom[81] = 32'b00000010100000010010010000000011;
rom[82] = 32'b00000011000000010000000100010011;
rom[83] = 32'b00000000000000001000000001100111;
rom[84] = 32'b11111101000000010000000100010011;
rom[85] = 32'b00000010000100010010011000100011;
rom[86] = 32'b00000010100000010010010000100011;
rom[87] = 32'b00000011000000010000010000010011;
rom[88] = 32'b11111100101001000010111000100011;
rom[89] = 32'b11111100101101000010110000100011;
rom[90] = 32'b11111101110001000010011110000011;
rom[91] = 32'b00000000000001111010011110000011;
rom[92] = 32'b11111110111101000010011000100011;
rom[93] = 32'b11111101100001000010011110000011;
rom[94] = 32'b00000000000001111010011100000011;
rom[95] = 32'b11111101110001000010011110000011;
rom[96] = 32'b00000000111001111010000000100011;
rom[97] = 32'b11111101100001000010011110000011;
rom[98] = 32'b11111110110001000010011100000011;
rom[99] = 32'b00000000111001111010000000100011;
rom[100] = 32'b00000000000000000000000000010011;
rom[101] = 32'b00000010110000010010000010000011;
rom[102] = 32'b00000010100000010010010000000011;
rom[103] = 32'b00000011000000010000000100010011;
rom[104] = 32'b00000000000000001000000001100111;

// 50us => 몇줄었는지
      

    end
    assign data = rom[addr[31:2]];
endmodule